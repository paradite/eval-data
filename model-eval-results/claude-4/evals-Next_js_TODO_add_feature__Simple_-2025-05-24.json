{
  "evals": [
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gpt-4.1",
      "provider": "openai",
      "rating": 9.25,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "**db.ts**\n```ts\n// ...\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n// ...\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at', {withTimezone: true}).defaultNow().notNull(),\n});\n```\n\n**page.jsx**\n```jsx\n// ...\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <span style={{marginLeft: 8, color: '#888', fontSize: 12}}>\n              {new Date(todo.createdAt).toLocaleString()}\n            </span>\n          </li>\n        ))}\n      </ul>\n      {/* ... */}\n    </main>\n  );\n// ...\n```\n**(You must also run a migration to add the `created_at` column to your database.)**",
      "reasoning": "",
      "usage": {
        "promptTokens": 519,
        "completionTokens": 344,
        "totalTokens": 863
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 8637,
      "id": "11c28b76-bddd-470a-b5e9-cfd130f44e6c",
      "createdAt": "2025-04-29T11:52:18.249Z",
      "notes": "Very concise\nFollows instruction well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-3-7-sonnet-20250219",
      "provider": "anthropic",
      "rating": 7.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "Here's the implementation to add a `created_at` field to todos:\n\n```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <span className=\"timestamp\">{new Date(todo.created_at).toLocaleString()}</span>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\nYou'll also need to run a migration to add the column to the existing table. Create a migration file or use Drizzle's migration tools to execute:\n\n```sql\nALTER TABLE todos ADD COLUMN created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 636,
        "completionTokens": 673,
        "totalTokens": 1309
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 10848,
      "id": "0d747610-0630-4a10-8314-6f52623873b7",
      "createdAt": "2025-04-29T11:52:18.277Z",
      "notes": "Verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-exp-03-25",
      "provider": "google",
      "rating": 7.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n// --- Unmodified imports ---\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\nimport {sql} from 'drizzle-orm';\n\n// --- Unmodified neonConfig and client setup ---\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  // Add created_at field with default value\n  created_at: timestamp('created_at', {mode: 'date'}).default(sql`now()`),\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      // Select the new created_at field\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    // Sort by created_at descending by default, allow ascending via searchParam\n    .orderBy(\n      searchParams.asc\n        ? sql`${todosTable.created_at} ASC`\n        : sql`${todosTable.created_at} DESC`,\n    );\n\n  return (\n    // --- Unmodified main and h1 ---\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            {/* Display formatted timestamp */}\n            <small style={{marginLeft: '10px', color: 'grey'}}>\n              {todo.created_at?.toLocaleString()}\n            </small>\n          </li>\n        ))}\n      </ul>\n\n      {/* --- Unmodified form --- */}\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n\n// --- actions.js (No changes needed as created_at has a default value) ---\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 576,
        "completionTokens": 689,
        "totalTokens": 1265
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 12219,
      "id": "28ab6ccf-1a0e-4261-b5e0-92f663eed143",
      "createdAt": "2025-04-29T11:52:18.292Z",
      "notes": "Verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "deepseek-chat",
      "provider": "deepseek",
      "rating": 9,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "Here are the modifications needed to add `created_at` field:\n\ndb.ts\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\n// ... existing imports and config\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n```\n\npage.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.createdAt} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a href=\"https://github.com/rauchg/emoji-todo\" target=\"_blank\">\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <small>({new Date(todo.createdAt).toLocaleString()})</small>\n          </li>\n        ))}\n      </ul>\n      {/* ... rest of the code remains same */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 538,
        "completionTokens": 395,
        "totalTokens": 933
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 20661,
      "id": "d5efc702-2e6b-424b-89ac-19ab5d505e29",
      "createdAt": "2025-04-29T11:52:18.304Z",
      "notes": "Concise\nFollows instruction well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "inception/mercury-coder-small-beta",
      "provider": "openrouter",
      "rating": 8,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} - Created at: {new Date(todo.createdAt).toLocaleString()}\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 488,
        "completionTokens": 435,
        "totalTokens": 923
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 1533,
      "id": "4373a622-afae-4a9e-ab91-dd0fa66b6c9d",
      "createdAt": "2025-05-02T07:12:53.719Z",
      "notes": "Slightly verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "qwen/qwen3-235b-a22b",
      "provider": "openrouter",
      "rating": 8,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport { neon, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { pgTable, serial, varchar, timestamp } from 'drizzle-orm/pg-core'; // modified\n\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', { length: 10 }).default(''),\n  created_at: timestamp('created_at').defaultNow(), // added\n});\n```\n\n```jsx\n// page.jsx\nimport { db, todosTable } from './db';\nimport { submit } from './actions';\nimport { sql } from 'drizzle-orm';\n\nexport default async function Home({ searchParams }) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // added\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <small>{new Date(todo.created_at).toLocaleString()}</small> {/* modified */}\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "Okay, I need to add a created_at field to the todos table in both the backend and frontend. Let me start by looking at the existing code.\n\nFirst, the db.ts file defines the todosTable using drizzle-orm. The current schema has id and text fields. To add created_at, I should use the timestamp type. Drizzle's pgCore has a timestamp function. I'll import timestamp from 'drizzle-orm/pg-core' and add it to the todosTable. The default value should be the current timestamp, so I can set it with .defaultNow(). That should handle the backend schema update.\n\nNext, the page.jsx file selects the todos. The current select statement includes id and text. I need to add created_at to the selected fields. Wait, but in the frontend, do I need to display it? The user might want to show it, so I should include it in the select. However, the existing code doesn't have it, so maybe the user wants to add it to the display. Let me check the instructions again. The prompt says to update both backend and frontend. So even if the frontend doesn't display it now, adding the field to the query is necessary. So in the select, add created_at to the fields.\n\nIn the page.jsx, the select part is:\n\n.select({\n  id: todosTable.id,\n  text: todosTable.text,\n})\n\nI need to add created_at here. So:\n\n.select({\n  id: todosTable.id,\n  text: todosTable.text,\n  createdAt: todosTable.created_at,\n})\n\nBut wait, the column name in the database is created_at, but in the result, it's camelCase? Or does Drizzle handle that? Maybe the column is called created_at in the database, but in the result object, it's created_at. Or maybe the user wants to use camelCase. Hmm, but in the database, the column is defined as created_at, so in the query result, it will be a string key. So in the frontend code, accessing todo.created_at would be necessary. However, in JSX, using a prop with an underscore might be okay. So in the page.jsx, after adding the field to the select, the todo objects will have a created_at property.\n\nNow, the user might want to display this on the frontend. The original code shows the text in the li. Maybe adding the created_at next to it. But the user's instruction just says to add the field to both backend and frontend. So perhaps just including it in the data is sufficient. However, the problem statement might require displaying it. The original prompt says \"update both backend and frontend\" but doesn't specify the display. Hmm, but the user might want to show it. Let me check the original page.jsx code. The li element only has {todo.text}, so maybe adding the created_at as well. For example, <li key={todo.id}>{todo.text} <small>{todo.created_at}</small></li>. But how to format the date? Maybe using toLocaleString().\n\nWait, but the user might not have specified how to display it, but the instruction is to add the field. So perhaps the frontend part requires modifying the select to include the new field and then using it in the UI. However, the user might not have mentioned how to display it, but since the instruction says \"update both backend and frontend\", we need to make sure that the frontend code is updated to handle the new field. So in the select, include created_at, and then in the JSX, perhaps display it. Let's proceed with that.\n\nSo steps:\n\n1. In db.ts, add created_at column to todosTable with timestamp type, default now.\n\n2. In page.jsx, add created_at to the select fields.\n\n3. In the JSX, display the created_at, perhaps formatted.\n\nWait, but the user might not want to display it. But the instruction says to update both backend and frontend. So maybe the frontend code needs to be modified to include the new field in the query, even if it's not displayed. However, the original code's page.jsx doesn't have the field. So adding it to the select is necessary. Then, in the frontend, maybe the user wants to show it. But the problem says \"update both backend and frontend\", so perhaps adding the field to the query and the database schema is sufficient. However, the user might also want to display it. Let me check the original code again.\n\nIn the page.jsx, the todos are rendered as <li>{todo.text}</li>. So adding the created_at would require modifying that. But the user might not have specified. However, the instruction says to \"add created_at field to todos, update both backend and frontend\". So the minimal change would be to add the column to the database schema and include it in the query. However, if the frontend code does not include it in the query, then it's not updated. So the main changes are:\n\nIn db.ts: add created_at column.\n\nIn page.jsx: add created_at to the select.\n\nBut also, if the user wants to display it, then adding to the JSX. However, the user might not have specified. The problem says \"update both backend and frontend\". So the frontend code must be modified. The page.jsx code must be updated to include the new field in the select. If the user wants to display it, that's part of the frontend update. However, the original code does not display it, but the problem says to update the frontend. So perhaps the answer should include adding the field to the select and displaying it. Alternatively, maybe the user just needs to have the field in the database and the query, even if not displayed. But the problem says \"update both backend and frontend\", so perhaps the frontend code must be modified. So the steps are:\n\nBackend: modify db.ts to add created_at.\n\nFrontend: modify page.jsx to include created_at in select and display it.\n\nBut how to display? Let's proceed to add it to the li, formatted.\n\nSo in page.jsx:\n\n{todos.map(todo => (\n  <li key={todo.id}>\n    {todo.text} <small>{new Date(todo.created_at).toLocaleString()}</small>\n  </li>\n))}\n\nBut need to make sure that created_at is a Date object. However, when using drizzle with neon, the timestamp from the database might be a string, so converting it to a Date object. But maybe the ORM handles that. So in the frontend code, using todo.created_at, formatted.\n\nPutting it all together:\n\nIn db.ts:\n\nimport { timestamp } from 'drizzle-orm/pg-core';\n\ntodosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n\nIn page.jsx:\n\nselect: add created_at.\n\n<li> elements: add the date.\n\nAlso, in the form submission, the created_at is set automatically, so no changes needed in the actions.\n\nWait, the submit action probably inserts a new todo. The created_at is set automatically on the server side, so the insert doesn't need to include it. So no changes needed in the submit function.\n\nSo the code changes are:\n\nIn db.ts, add the created_at column.\n\nIn page.jsx, add created_at to the select and display it.\n\nNow, code:\n\ndb.ts:\n\nAdd import timestamp from 'drizzle-orm/pg-core'.\n\nUpdate todosTable to include created_at: timestamp('created_at').defaultNow()\n\npage.jsx:\n\nIn the select, add createdAt: todosTable.created_at.\n\nThen in the JSX, in the li, display the created_at.\n\nWait, but the original code uses text, which is a string. So in the JSX:\n\n{todos.map(todo => (\n  <li key={todo.id}>\n    {todo.text} <span>{todo.created_at}</span>\n  </li>\n))}\n\nBut the date might need formatting, so using new Date(todo.created_at).toLocaleString().\n\nBut the code in page.jsx is a .jsx file, so JavaScript functions can be used.\n\nSo putting it all together.\n\nNow, code:\n\ndb.ts:\n\nimport { neon, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-http';\nimport { pgTable, serial, varchar, timestamp } from 'drizzle-orm/pg-core'; // added timestamp\n\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', { length: 10 }).default(''),\n  created_at: timestamp('created_at').defaultNow(), // added\n});\n\npage.jsx:\n\nimport { db, todosTable } from './db';\nimport { submit } from './actions';\nimport { sql } from 'drizzle-orm';\n\nexport default async function Home({ searchParams }) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // added\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <small>{new Date(todo.created_at).toLocaleString()}</small>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n\nWait, but in the select, the key is 'created_at', so in the todo object, it's todo.created_at. But in JavaScript, to access it, you can use todo.created_at if the key is 'created_at'. Wait, in the select, the object is:\n\n{\n  id: todosTable.id,\n  text: todosTable.text,\n  created_at: todosTable.created_at,\n}\n\nSo the property name in the result will be 'created_at', which in JavaScript can be accessed as todo['created_at'] or todo.created_at if the key is a string. Wait, no: in JavaScript, object keys are strings. If the key is 'created_at', then you can use dot notation if the identifier is valid. Since 'created_at' has an underscore, you can't use dot notation. Wait, no: you can use todo.created_at only if the key is 'created_at'. Wait, no: in JavaScript, if the key is 'created_at', then you can access it as todo['created_at'] or if the key is a valid identifier, you can use dot notation. Wait, no: the dot notation works for keys that are identifiers (like 'createdAt' or 'created_at' if they are valid). Wait, no, in JavaScript, if the key has an underscore, you can use dot notation. For example:\n\nconst obj = { 'created_at': new Date() };\nconsole.log(obj.created_at); // valid\n\nYes, because in JavaScript, the dot notation works if the key is a valid identifier. 'created_at' is a valid identifier (except for the underscore, no, wait, identifiers can't have hyphens but can have underscores. Wait, JavaScript identifiers can include letters, $, _, and digits (but not starting with a digit). So 'created_at' is a valid identifier. So obj.created_at works.\n\nWait, no: wait, the key in the object is 'created_at' (string), so in JavaScript, you can access it via obj['created_at'] or if the key is a valid identifier, you can use dot notation. Wait, no: in JavaScript, if the key is a valid identifier, you can use dot notation. 'created_at' is a valid identifier (since it uses letters and underscore), so you can use obj.created_at. Wait, no: wait, in JavaScript, object property names can be any string, and if the property name is a valid identifier, you can use dot notation. For example:\n\nconst obj = { 'my-key': 123 };\nconsole.log(obj.my-key); // error, because my-key is not a valid identifier. You have to use obj['my-key'].\n\nBut if the key is 'created_at', which is a valid identifier (since it's letters and underscore), you can use dot notation. Wait, no: wait, 'created_at' is a valid identifier because it starts with a letter and contains letters and underscores. So in JavaScript, you can use obj.created_at.\n\nWait, no, wait:\n\nIn JavaScript, identifiers can contain letters, digits, underscores, and dollar signs. So 'created_at' is a valid identifier, so you can use dot notation. So in this case, todo.created_at would work.\n\nWait, but in the select, the key is defined as 'created_at' in the database column. When the ORM returns the object, the key in the object would be 'created_at' (as a string). But in JavaScript, when you have an object like { 'created_at': 'value' }, you can access it via obj.created_at. Because the key is a valid identifier. So in the code, after the select, the todo object will have a created_at property, accessible as todo.created_at.\n\nSo in the JSX, using {todo.created_at} is correct.\n\nBut the date might be a string from the database, so converting it to a Date object and formatting. So using new Date(todo.created_at).toLocaleString().\n\nBut in the frontend, the user might want to display the date in a user-friendly way, so adding that formatting.\n\nSo the code in the li becomes:\n\n<li key={todo.id}>\n  {todo.text} <small>{new Date(todo.created_at).toLocaleString()}</small>\n</li>\n\nBut wait, the created_at is a TIMESTAMP WITHOUT TIME ZONE in PostgreSQL. The defaultNow() would set it to the current time on the server, which is probably in UTC. When we create a Date object in JavaScript, it will interpret the timestamp as UTC and convert to the user's local time. But using toLocaleString() without options would format according to the user's locale and time zone, which is probably desired.\n\nAlternatively, if the server sends the timestamp as a string in ISO format (like '2024-05-20T12:34:56.789Z'), then new Date() would parse it as UTC. The toLocaleString() would then display in the user's local time. That's acceptable.\n\nNow, considering the code changes:\n\nIn db.ts, the import statement must include timestamp. So adding it to the import from 'drizzle-orm/pg-core'.\n\nIn page.jsx, the select must include the new field.\n\nIn the JSX, display the created_at formatted.\n\nNow, the user's code in page.jsx has a form that submits to 'submit' action. The insert in the action would not need to include created_at, since it's set by default in the database.\n\nSo the code modifications are as follows.\n",
      "usage": {
        "promptTokens": 518,
        "completionTokens": 3710,
        "totalTokens": 4228
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 65056,
      "id": "9a785070-74eb-4bae-a9f3-dbf4873e4960",
      "createdAt": "2025-05-02T07:13:57.241Z",
      "notes": "Slightly verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-3-5-sonnet-20241022",
      "provider": "anthropic",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "Here's how to add `created_at` to your todo app:\n\n```sql\n-- migration.sql\nALTER TABLE todos ADD COLUMN created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;\n```\n\n```ts\n// db.ts\nimport {/* ... */, timestamp} from 'drizzle-orm/pg-core';\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at', { withTimezone: true }).defaultNow()\n});\n```\n\n```jsx\n// page.jsx\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.created_at} ASC` : sql`${todosTable.created_at} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <small> {new Date(todo.created_at).toLocaleString()}</small>\n          </li>\n        ))}\n      </ul>\n      {/* ... */}\n    </main>\n  );\n}\n```\n\nAlternative: You could also use a client-side formatter like `date-fns` or store timestamps as Unix epochs.",
      "reasoning": "",
      "usage": {
        "promptTokens": 636,
        "completionTokens": 411,
        "totalTokens": 1047
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 6597,
      "id": "1d33715c-add6-4c87-a63a-0fe45ee924a7",
      "createdAt": "2025-05-02T07:17:13.317Z",
      "notes": "Slightly verbose\nFollows instruction",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-preview-03-25",
      "provider": "google",
      "rating": 7.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n// import {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // MODIFIED\n\nneonConfig.fetchConnectionCache = true;\n// ... rest of the file\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow().notNull(), // ADDED\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // ADDED\n    })\n    .from(todosTable)\n    .limit(20)\n    // .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n    .orderBy(searchParams.asc ? sql`${todosTable.created_at} ASC` : sql`${todosTable.created_at} DESC`); // MODIFIED to sort by created_at\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {/* {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))} */}\n        {todos.map(todo => ( // MODIFIED\n          <li key={todo.id}>\n            {todo.text} - <small>{new Date(todo.created_at).toLocaleString()}</small>\n          </li>\n        ))}\n      </ul>\n\n      {/* ... rest of the component */}\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 576,
        "completionTokens": 661,
        "totalTokens": 1237
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 10741,
      "id": "8222762c-6746-4ce3-bd2f-005b5848c8c3",
      "createdAt": "2025-05-07T06:51:31.369Z",
      "notes": "Verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-preview-05-06",
      "provider": "google",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n// import {pgTable, serial, varchar} from 'drizzle-orm/pg-core'; // Old\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Modified\n\nneonConfig.fetchConnectionCache = true;\n// ...\n// export const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(), // Added\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\n// import {sql} from 'drizzle-orm'; // Old, if you switch to Drizzle helpers for orderBy\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // Added\n    })\n    .from(todosTable)\n    .limit(20)\n    // .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`); // Old\n    // Changed to sort by created_at by default (newest first if asc is not present/false)\n    .orderBy(searchParams.asc === 'true' ? todosTable.created_at.asc() : todosTable.created_at.desc()); // Modified\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {/* {todo.text} Old */}\n            {todo.text} - <small>{todo.created_at.toLocaleString()}</small> {/* Modified */}\n          </li>\n        ))}\n      </ul>\n\n      {/* ... */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 576,
        "completionTokens": 514,
        "totalTokens": 1090
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 49650,
      "id": "ee48ad64-6f45-4a7a-8c9b-78fe313187c6",
      "createdAt": "2025-05-07T06:52:10.279Z",
      "notes": "Slightly verbose\nFollows instruction",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "mistralai/mistral-medium-3",
      "provider": "openrouter",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <small>{new Date(todo.createdAt).toLocaleString()}</small>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 540,
        "completionTokens": 494,
        "totalTokens": 1034
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 16652,
      "id": "1c11dc53-b3bb-4627-a6c9-6001f62a7d9f",
      "createdAt": "2025-05-07T14:57:19.685Z",
      "notes": "Concise",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-preview-03-25",
      "provider": "google",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "db.ts\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Modified\n\nneonConfig.fetchConnectionCache = true;\n// ...\n// export const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow().notNull(), // Added\n});\n```\n\npage.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // Added\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} - <small>{new Date(todo.created_at).toLocaleString()}</small> {/* Modified */}\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        {/* ... */}\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 453,
        "totalTokens": 1034
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 17687,
      "id": "96b2dfc3-7f45-4dfe-908e-c980ea912494",
      "createdAt": "2025-05-08T09:38:10.241Z",
      "notes": "Slightly verbose\nFollows instruction",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-preview-05-06",
      "provider": "google",
      "rating": 7.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\n// ...\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\nimport {sql} from 'drizzle-orm';\n\n// ...\n// const client = neon(...);\n// export const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').default(sql`now()`).notNull(),\n});\n```\n\n```jsx\n// page.jsx\n// import {db, todosTable} from './db';\n// import {submit} from './actions';\n// import {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* <h1>...</h1> */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <span style={{fontSize: '0.8em', marginLeft: '8px', color: '#666'}}>\n              ({new Date(todo.created_at).toLocaleString()})\n            </span>\n          </li>\n        ))}\n      </ul>\n\n      {/* <form action={submit}>...</form> */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 414,
        "totalTokens": 995
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 23237,
      "id": "91307e95-651e-4b28-b2da-8007de4c2df4",
      "createdAt": "2025-05-08T09:38:15.792Z",
      "notes": "Not optimal",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-exp-03-25",
      "provider": "google",
      "rating": 9,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "db.ts\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Modified\n\nneonConfig.fetchConnectionCache = true;\n// ...\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at', { mode: 'date' }).defaultNow().notNull(), // Added\n});\n```\n\npage.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // Added\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <small>({todo.created_at.toLocaleString()})</small> {/* Modified */}\n          </li>\n        ))}\n      </ul>\n\n      {/* ... */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 402,
        "totalTokens": 983
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 24764,
      "id": "220f0a6d-fddd-41f2-9e18-599c821dcf02",
      "createdAt": "2025-05-08T09:38:17.317Z",
      "notes": "Concise\nFollows instruction well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-3-7-sonnet-20250219",
      "provider": "anthropic",
      "rating": 7,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "## Modified Files\n\n### db.ts\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n### page.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <span className=\"timestamp\">{new Date(todo.created_at).toLocaleString()}</span>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\n### Migration Script (create as migrate.js)\n```js\nimport {db, todosTable} from './db';\nimport {sql} from 'drizzle-orm';\n\nasync function migrate() {\n  try {\n    // Add created_at column if it doesn't exist\n    await db.execute(sql`\n      ALTER TABLE todos \n      ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n    `);\n    console.log('Migration completed successfully');\n  } catch (error) {\n    console.error('Migration failed:', error);\n  } finally {\n    process.exit(0);\n  }\n}\n\nmigrate();\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 654,
        "completionTokens": 756,
        "totalTokens": 1410
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 9565,
      "id": "efdbcfda-cb3e-44a7-a3ec-3d3d335c731e",
      "createdAt": "2025-05-08T10:44:24.972Z",
      "notes": "Verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code.\n- Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-3-7-sonnet-20250219",
      "provider": "anthropic",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} <span className=\"timestamp\">{new Date(todo.created_at).toLocaleString()}</span>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 656,
        "completionTokens": 598,
        "totalTokens": 1254
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code.\n- Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 7317,
      "id": "585a8621-4925-4c0f-a784-6b02be182cc2",
      "createdAt": "2025-05-08T10:58:31.208Z",
      "notes": "Concise",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "accounts/fireworks/models/deepseek-v3-0324",
      "provider": "custom",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "baseURL": "https://api.fireworks.ai/inference/v1",
      "apiKey": "fw_3ZWMGAS3QN2LRbjgjQ5Py64z",
      "response": "Here are the changes needed to add `created_at` field:\n\ndb.ts\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow(),\n});\n```\n\npage.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.createdAt} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text} - {new Date(todo.createdAt).toLocaleString()}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 538,
        "completionTokens": 496,
        "totalTokens": 1034
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 4071,
      "id": "81b3a192-ee3e-4c17-bb10-96cdec592ca7",
      "createdAt": "2025-05-16T09:17:33.884Z",
      "notes": "Concise",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "meta-llama/llama-4-maverick",
      "provider": "openrouter",
      "rating": 7.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "### db.ts\n```typescript\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n```\n\n### actions.ts (assuming this is where the submit action is defined)\n```typescript\nimport {db, todosTable} from './db';\n\nexport async function submit(formData) {\n  // ... other code\n  await db.insert(todosTable).values({\n    text: formData.get('text'),\n    // createdAt will be automatically set by the database\n  });\n  // ... other code\n}\n```\n\n### page.jsx\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text} ({todo.createdAt.toLocaleString()})\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\n### Migration (you will need to create a migration to add the new column to the existing table)\nYou can use `drizzle-kit` to generate the migration:\n```bash\nnpx drizzle-kit generate\n```\nThen, you can run the migration using:\n```typescript\nimport {db} from './db';\nimport {migrate} from 'drizzle-orm/neon-http/migrator';\n\nasync function main() {\n  await migrate(db, {migrationsFolder: './migrations'});\n}\n\nmain();\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 525,
        "completionTokens": 657,
        "totalTokens": 1182
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 6261,
      "id": "7be99806-6b02-4f0f-9546-8cc71adb81c7",
      "createdAt": "2025-05-16T16:37:01.039Z",
      "notes": "verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "openai/codex-mini",
      "provider": "openrouter",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "I need to see the ‚Äúactions‚Äù file to update the insert logic.",
      "reasoning": "",
      "usage": {
        "promptTokens": 518,
        "completionTokens": 341,
        "totalTokens": 859,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 5627,
      "id": "6fb258f4-8d33-4217-96d9-5e98877a7def",
      "createdAt": "2025-05-17T10:58:05.124Z",
      "notes": "Asked for more context!",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\nactions.js\n\n```\n\"use server\";\nimport { db, todosTable } from \"./db\";\nimport { redirect } from \"next/navigation\";\n\nexport async function submit(form) {\n  const text = form.get(\"text\") + \"\";\n  if (!/^[\\p{Emoji}]+$/u.test(text)) return;\n  await db.insert(todosTable).values({ text });\n  redirect(\"/\");\n}\n```"
      ],
      "model": "openai/codex-mini",
      "provider": "openrouter",
      "rating": 6,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```diff\n--- a/db.ts\n+++ b/db.ts\n@@\n-export const todosTable = pgTable('todos', {\n-  id: serial('id').primaryKey(),\n-  text: varchar('text', {length: 10}).default(''),\n-});\n+export const todosTable = pgTable('todos', {\n+  id: serial('id').primaryKey(),\n+  text: varchar('text', { length: 10 }).default(''),\n+  created_at: timestamp('created_at', { withTimezone: true }).defaultNow(),\n+});\n```\n```diff\n--- a/actions.js\n+++ b/actions.js\n@@ export async function submit(form) {\n-  await db.insert(todosTable).values({ text });\n+  await db.insert(todosTable).values({ text /* created_at auto */ });\n```\n```diff\n--- a/page.jsx\n+++ b/page.jsx\n@@\n-  const todos = await db\n-    .select({\n-      id: todosTable.id,\n-      text: todosTable.text,\n-    })\n+  const todos = await db\n+    .select({\n+      id: todosTable.id,\n+      text: todosTable.text,\n+      created_at: todosTable.created_at,\n+    })\n@@\n-      <ul>\n-        {todos.map(todo => (\n-          <li key={todo.id}>{todo.text}</li>\n-        ))}\n-      </ul>\n+      <ul>\n+        {todos.map(({ id, text, created_at }) => (\n+          <li key={id}>\n+            {text}{' '}\n+            <time dateTime={created_at.toISOString()}>\n+              {created_at.toLocaleString()}\n+            </time>\n+          </li>\n+        ))}\n+      </ul>\n```\n```diff\n--- a/prisma/migrations/2023xxxx_add_created_at_to_todos/steps.sql\n+++ b/prisma/migrations/2023xxxx_add_created_at_to_todos/steps.sql\n@@\n ALTER TABLE \"todos\"\n+ADD COLUMN \"created_at\" timestamptz NOT NULL DEFAULT now();\n```\n**Notes:**\n- Added `created_at` with a default of `now()` in both the database migration and Drizzle schema.\n- Frontend now selects & displays `created_at`.\n- No user‚Äêside changes in `actions.js` since `created_at` is auto‚Äêpopulated.\n",
      "reasoning": "",
      "usage": {
        "promptTokens": 599,
        "completionTokens": 957,
        "totalTokens": 1556,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\nactions.js\n\n```\n\"use server\";\nimport { db, todosTable } from \"./db\";\nimport { redirect } from \"next/navigation\";\n\nexport async function submit(form) {\n  const text = form.get(\"text\") + \"\";\n  if (!/^[\\p{Emoji}]+$/u.test(text)) return;\n  await db.insert(todosTable).values({ text });\n  redirect(\"/\");\n}\n```",
      "durationMs": 18578,
      "id": "3b23b79b-147f-4f6b-b118-b8e512473eab",
      "createdAt": "2025-05-17T11:02:58.417Z",
      "notes": "diff format\nverbose",
      "contextId": [
        "49f045f2-3848-4754-8995-faf227609f00"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-pro-preview-05-06",
      "provider": "google",
      "rating": 9,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n// import {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // modified\n\nneonConfig.fetchConnectionCache = true;\n// ...\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow().notNull(), // added\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // added\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            {/* added created_at display */}\n            <small style={{marginLeft: '10px', color: 'gray'}}>\n              ({todo.created_at.toLocaleString()})\n            </small>\n          </li>\n        ))}\n      </ul>\n\n      {/* ... */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 1316,
        "totalTokens": 1897,
        "thoughtsTokens": 871
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 14682,
      "id": "43a2e455-5223-4d87-99d8-bd5e65e4ac66",
      "createdAt": "2025-05-20T09:07:33.892Z",
      "notes": "Concise\nFollows instruction well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "google/gemini-2.5-flash-preview-05-20:thinking",
      "provider": "openrouter",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Import 'timestamp'\n\n// ... (other imports and neonConfig)\n\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at', {withResolution: 'micro', mode: 'date'}).notNull().defaultNow(), // Add created_at field\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // Select the new created_at field\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... (h1 and source link unchanged) */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}{' '}\n            {todo.created_at && (\n              <small style={{marginLeft: '10px', color: '#888'}}>\n                {new Date(todo.created_at).toLocaleString()}\n              </small>\n            )}\n          </li>\n        ))}\n      </ul>\n      {/* ... (form unchanged) */}\n    </main>\n  );\n}\n```",
      "reasoning": "Reviewing Database Schema Changes\n\nOkay, the plan is clear. First, I'll modify `db.ts` to add the `created_at` column as a timestamp, defaulting to the current time and making it not null. Then, I'll update `page.jsx` to fetch and display the new field, keeping things straightforward as requested.\n\n\n### Analyzing Implementation Steps\n\nI've broken down the tasks into backend and frontend changes. For `db.ts`, I'll use `timestamp` with `defaultNow()` and `notNull()`. In `page.jsx`, I'll add `created_at` to the select and display it, aiming for a simple presentation, as requested.\n\n\n",
      "usage": {
        "promptTokens": 582,
        "completionTokens": 966,
        "totalTokens": 1548,
        "thoughtsTokens": 498
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 6729,
      "id": "7b27f720-6077-4e78-be76-64be2c5d6f08",
      "createdAt": "2025-05-20T18:48:54.480Z",
      "notes": "okay",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-flash-preview-05-20",
      "provider": "google",
      "rating": 7,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Add timestamp import\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').notNull().defaultNow(), // Add created_at field\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at, // Select created_at\n    })\n    .from(todosTable)\n    .limit(20)\n    // Order by created_at, defaulting to DESC\n    .orderBy(searchParams.asc ? sql`${todosTable.created_at} ASC` : sql`${todosTable.created_at} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            {/* Display created_at */}\n            <small style={{marginLeft: '10px', color: '#666'}}>\n              {new Date(todo.created_at).toLocaleDateString()} {new Date(todo.created_at).toLocaleTimeString()}\n            </small>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 1635,
        "totalTokens": 2216,
        "thoughtsTokens": 1023
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 8875,
      "id": "f0577cfb-77c7-4661-84b3-ec8b3389b225",
      "createdAt": "2025-05-20T18:48:56.627Z",
      "notes": "verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "google/gemini-2.5-flash-preview-05-20",
      "provider": "openrouter",
      "rating": 6,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```diff\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n-import {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n+import {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n+  created_at: timestamp('created_at').defaultNow(),\n });\n```\n```diff\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n+      created_at: todosTable.created_at,\n     })\n     .from(todosTable)\n     .limit(20)\n-    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n+    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.created_at} DESC`);\n\n   return (\n     <main key={todos[0]?.id}>\n       <h1>\n         Emoji TODO{' '}\n         <a\n           href=\"https://github.com/rauchg/emoji-todo\"\n           target=\"_blank\"\n         >\n           source\n         </a>\n       </h1>\n       <ul>\n         {todos.map(todo => (\n-          <li key={todo.id}>{todo.text}</li>\n+          <li key={todo.id}>{todo.text} - {todo.created_at?.toLocaleDateString()}</li>\n         ))}\n       </ul>\n\n       <form action={submit}>\n         <input\n           type=\"text\"\n           placeholder=\"ü´° (only emojis allowed)\"\n           pattern=\"^[\\p{Emoji}]+$\"\n           name=\"text\"\n           autoFocus\n           maxLength=\"10\"\n           required\n         />\n         <button>‚úâÔ∏è</button>\n       </form>\n     </main>\n   );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 582,
        "completionTokens": 601,
        "totalTokens": 1183,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 3014,
      "id": "e0044134-efae-4744-b9a7-539016971e88",
      "createdAt": "2025-05-20T18:49:25.837Z",
      "notes": "diff format\nverbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "google/gemini-2.5-flash-preview-05-20",
      "provider": "openrouter",
      "rating": 6,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```diff\n// db.ts\n\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\n-import {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n+import {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n+  created_at: timestamp('created_at').defaultNow(),\n });\n```\n```diff\n// page.jsx\n\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n+      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n-          <li key={todo.id}>{todo.text}</li>\n+          <li key={todo.id}>{todo.text} - {todo.created_at.toLocaleString()}</li>\n         ))}\n       </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 582,
        "completionTokens": 570,
        "totalTokens": 1152,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 2961,
      "id": "86d6bdc2-39f6-4717-8ba7-34a24bd2516c",
      "createdAt": "2025-05-20T19:03:18.148Z",
      "notes": "diff format\nverbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "google/gemini-2.5-flash-preview-05-20:thinking",
      "provider": "openrouter",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // ADDED timestamp import\n\n// ... (remaining imports and neonConfig/client setup)\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow().notNull(), // ADDED created_at field\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt, // ADDED created_at to select\n    })\n    .from(todosTable)\n    .limit(20)\n    // Updated orderBy to use created_at instead of id for chronological sort\n    .orderBy(searchParams.asc ? sql`${todosTable.createdAt} ASC` : sql`${todosTable.createdAt} DESC`); \n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          // Display created_at alongside text\n          <li key={todo.id}>{todo.text} - {todo.createdAt.toLocaleString()}</li>\n        ))}\n      </ul>\n\n      {/* ... (remaining form code) */}\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "Reviewing Table Schema Design\n\nI need to add a `created_at` field to the `todos` table. Seems straightforward, but I'll need to decide on the data type. A timestamp with timezone would likely be the most robust choice for this.\n\n\nChecking Database Schema Updates\n\nI'm adding a `created_at` field to the `todos` table. I'll define it as a timestamp in `db.ts`. Next, I'll update the backend in `page.jsx` to select and order by `created_at`, and finally, render it in the UI. The schema modification will be simple, but updating the queries needs care.\n\n\nAdd Schema & Query Changes\n\nOkay, the core changes are defined. For `db.ts`, I'll import the timestamp and add the column definition. In `page.jsx`, I'll update the query to select and order by `created_at`, and then modify the UI rendering. It's simple, but needs precision to ensure a smooth integration.\n\n\nPlanning Schema and Code Generation\n\nI've reviewed the database and frontend updates. In `db.ts`, I will add the `created_at` column with a `timestamp` and `defaultNow()`. In `page.jsx`, I'll select the new field, adjust the ordering to `created_at DESC` and display it in the UI. I've also refined some points such as the `notNull()` constraint.\n\n\n",
      "usage": {
        "promptTokens": 582,
        "completionTokens": 1162,
        "totalTokens": 1744,
        "thoughtsTokens": 631
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 6297,
      "id": "8f596df4-1420-4da0-9078-8d3176310132",
      "createdAt": "2025-05-20T19:03:21.483Z",
      "notes": "okay",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "gemini-2.5-flash-preview-05-20",
      "provider": "google",
      "rating": 7,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core'; // Add timestamp\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow().notNull(), // Add created_at field\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.created_at, // Select created_at field\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text} ({todo.createdAt?.toLocaleString()})</li> {/* Display created_at */}\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 581,
        "completionTokens": 1074,
        "totalTokens": 1655,
        "thoughtsTokens": 536
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Be concise.\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 6555,
      "id": "0572ce53-44e5-4fc0-a64e-a78b56a36544",
      "createdAt": "2025-05-20T19:03:21.740Z",
      "notes": "verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "mistralai/devstral-small",
      "provider": "openrouter",
      "rating": 8.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "### db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n### page.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text} ({new Date(todo.created_at).toLocaleString()})</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 540,
        "completionTokens": 487,
        "totalTokens": 1027,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 2946,
      "id": "ba491a64-1671-4ad2-b7d1-68f343f53043",
      "createdAt": "2025-05-21T15:48:53.692Z",
      "notes": "okay",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "o3",
      "provider": "openai",
      "rating": 8,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "db.ts\n```ts\n-import {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n+import {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n+  createdAt: timestamp('created_at', {withTimezone: true}).defaultNow().notNull(),\n});\n```\n\npage.jsx\n```jsx\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n+     createdAt: todosTable.createdAt,\n    })\n    /* ... */\n\n      <ul>\n        {todos.map(todo => (\n-          <li key={todo.id}>{todo.text}</li>\n+          <li key={todo.id}>\n+            {todo.text}{' '}\n+            <time dateTime={todo.createdAt.toISOString()}>\n+              {todo.createdAt.toLocaleTimeString()}\n+            </time>\n+          </li>\n        ))}\n      </ul>\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 518,
        "completionTokens": 1282,
        "totalTokens": 1800,
        "thoughtsTokens": 1024
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 17778,
      "id": "8cbcd1b4-3fe1-490c-9b5e-0891deaf134c",
      "createdAt": "2025-05-22T10:28:59.938Z",
      "notes": "diff format",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-sonnet-4-20250514",
      "provider": "anthropic",
      "rating": 8,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "**db.ts**\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n**page.jsx**\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.created_at} ASC` : sql`${todosTable.created_at} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <small style={{marginLeft: '10px', color: '#666'}}>\n              {new Date(todo.created_at).toLocaleString()}\n            </small>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 636,
        "completionTokens": 621,
        "totalTokens": 1257,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 7915,
      "id": "c930ef9c-430a-4c1b-a5c0-6657d022eb4c",
      "createdAt": "2025-05-22T18:33:13.392Z",
      "notes": "a bit verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-opus-4-20250514",
      "provider": "anthropic",
      "rating": 8,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at').defaultNow().notNull(),\n});\n```\n\n```jsx\n// page.jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.createdAt} ASC` : sql`${todosTable.createdAt} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <time dateTime={todo.createdAt.toISOString()}>\n              {' '}\n              {new Date(todo.createdAt).toLocaleDateString()}\n            </time>\n          </li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 636,
        "completionTokens": 628,
        "totalTokens": 1264,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without descriptions, unless it is important.\n- Minimize prose, comments and empty lines.\n- Only show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 15222,
      "id": "49d35060-26cc-4d76-a897-5a62af2d21be",
      "createdAt": "2025-05-22T18:33:20.701Z",
      "notes": "a bit verbose",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-sonnet-4-20250514",
      "provider": "anthropic",
      "rating": 9.25,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "**db.ts**\n```ts\n// ... existing imports\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\n// ... existing code\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  created_at: timestamp('created_at').defaultNow(),\n});\n```\n\n**page.jsx**\n```jsx\n// ... existing imports\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      created_at: todosTable.created_at,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.created_at} ASC` : sql`${todosTable.created_at} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      {/* ... existing h1 */}\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>\n            {todo.text}\n            <small style={{marginLeft: '8px', color: '#666'}}>\n              {new Date(todo.created_at).toLocaleString()}\n            </small>\n          </li>\n        ))}\n      </ul>\n      {/* ... existing form */}\n    </main>\n  );\n}\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 654,
        "completionTokens": 374,
        "totalTokens": 1028,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 5621,
      "id": "6953fce1-0a0d-4114-99ff-6f1449e8eb3b",
      "createdAt": "2025-05-22T18:35:45.648Z",
      "notes": "Very concise\nFollows instruction well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    },
    {
      "prompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n",
      "context": [
        "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
      ],
      "model": "claude-opus-4-20250514",
      "provider": "anthropic",
      "rating": 9.5,
      "experimentId": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "promptStructure": "F",
      "images": [],
      "response": "```ts\n// db.ts\nimport {pgTable, serial, varchar, timestamp} from 'drizzle-orm/pg-core';\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n  createdAt: timestamp('created_at', {withTimezone: true}).defaultNow().notNull(),\n});\n```\n\n```jsx\n// page.jsx\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n      createdAt: todosTable.createdAt,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.createdAt} ASC` : sql`${todosTable.createdAt} DESC`);\n  \n  // ... rest of component\n```",
      "reasoning": "",
      "usage": {
        "promptTokens": 654,
        "completionTokens": 242,
        "totalTokens": 896,
        "thoughtsTokens": 0
      },
      "fullPrompt": "add created_at field to todos, update both backend and frontend.\n\nInstructions for the output format:\n\n- Output code without explanation, unless it is important.\n- Minimize prose, comments and empty lines.\n- ONLY show the relevant code that needs to be modified. Use comments to represent the parts that are not modified.\n- Do NOT output full code. Only output parts that need to be changed.\n- Make it easy to copy and paste.\n- Consider other possibilities to achieve the result, do not be limited by the prompt.\n\n\ndb.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n",
      "durationMs": 11771,
      "id": "838836c0-9474-48e1-a20e-eb04eb7eb902",
      "createdAt": "2025-05-22T18:35:51.799Z",
      "notes": "Very concise\nFollows instruction very well",
      "contextId": [
        "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466"
      ]
    }
  ],
  "experiments": [
    {
      "id": "a6a7a90a-cf02-4d00-bc9d-3f1b5b54964e",
      "name": "Next.js TODO add feature (Simple)",
      "category": "coding",
      "createdAt": "2025-05-15T07:42:44.697Z",
      "evalFunctionId": "a6386b4d-b06f-4c24-9b29-1232a1d1b875"
    }
  ],
  "contexts": [
    {
      "id": "49f045f2-3848-4754-8995-faf227609f00",
      "name": "Sample Next.js TODO app - full",
      "type": "text",
      "content": "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n\nactions.js\n\n```\n\"use server\";\nimport { db, todosTable } from \"./db\";\nimport { redirect } from \"next/navigation\";\n\nexport async function submit(form) {\n  const text = form.get(\"text\") + \"\";\n  if (!/^[\\p{Emoji}]+$/u.test(text)) return;\n  await db.insert(todosTable).values({ text });\n  redirect(\"/\");\n}\n```"
    },
    {
      "id": "bc2d13a8-8ba1-41fe-9c2d-2b07fcef8466",
      "name": "Sample Next.js TODO app",
      "type": "text",
      "content": "db.ts\n\n```ts\nimport {neon, neonConfig} from '@neondatabase/serverless';\nimport {drizzle} from 'drizzle-orm/neon-http';\nimport {pgTable, serial, varchar} from 'drizzle-orm/pg-core';\n\nneonConfig.fetchConnectionCache = true;\nconst client = neon(process.env.DATABASE_URL!, {\n  fetchOptions: {\n    cache: 'no-store',\n  },\n});\nexport const db = drizzle(client);\n\nexport const todosTable = pgTable('todos', {\n  id: serial('id').primaryKey(),\n  text: varchar('text', {length: 10}).default(''),\n});\n```\n\npage.jsx\n\n```jsx\nimport {db, todosTable} from './db';\nimport {submit} from './actions';\nimport {sql} from 'drizzle-orm';\n\nexport default async function Home({searchParams}) {\n  const todos = await db\n    .select({\n      id: todosTable.id,\n      text: todosTable.text,\n    })\n    .from(todosTable)\n    .limit(20)\n    .orderBy(searchParams.asc ? sql`${todosTable.id} ASC` : sql`${todosTable.id} DESC`);\n\n  return (\n    <main key={todos[0]?.id}>\n      <h1>\n        Emoji TODO{' '}\n        <a\n          href=\"https://github.com/rauchg/emoji-todo\"\n          target=\"_blank\"\n        >\n          source\n        </a>\n      </h1>\n      <ul>\n        {todos.map(todo => (\n          <li key={todo.id}>{todo.text}</li>\n        ))}\n      </ul>\n\n      <form action={submit}>\n        <input\n          type=\"text\"\n          placeholder=\"ü´° (only emojis allowed)\"\n          pattern=\"^[\\p{Emoji}]+$\"\n          name=\"text\"\n          autoFocus\n          maxLength=\"10\"\n          required\n        />\n        <button>‚úâÔ∏è</button>\n      </form>\n    </main>\n  );\n}\n```\n"
    }
  ]
}